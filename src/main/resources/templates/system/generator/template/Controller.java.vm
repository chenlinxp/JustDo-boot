package ${package}.${classnametolower}.controller;

import java.util.List;
import java.util.Map;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import ${package}.${classnametolower}.domain.${className}DO;
import ${package}.${classnametolower}.service.${className}Service;
import com.justdo.system.dict.service.DictContentService;
import com.justdo.common.annotation.Log;
import com.justdo.common.utils.PageUtils;
import com.justdo.common.utils.Query;
import com.justdo.common.utils.R;

/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
 
@Controller
@RequestMapping("/${pathName}/${classnametolower}")
public class ${className}Controller {

	private String preUrl="${pathName}/${classnametolower}"  ;
	@Autowired
	private ${className}Service ${classname}Service;

	@Autowired
	DictContentService dictContentService;

	/**
	* ${comments}列表页面
	* @return 列表页面路径
	*/
	@GetMapping()
	@RequiresPermissions("${pathName}:${classnametolower}:list")
	@ApiOperation(value="返回${comments}列表界面", notes="返回${comments}列表界面")
	String ${className}(){
	    return preUrl + "/${classnametolower}";
	}


	/**
	* ${comments}列表数据
	* @param params
	* @return
	*/
	@Log("${comments}列表")
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("${pathName}:${classnametolower}:list")
	@ApiOperation(value="获取${comments}列表接口", notes="获取${comments}列表接口")
	public PageUtils list(@RequestParam Map<String, Object> params){
		//查询列表数据
        Query query = new Query(params);
		List<${className}DO> ${classname}List = ${classname}Service.list(query);
		int total = ${classname}Service.count(query);
		PageUtils pageUtils = new PageUtils(${classname}List, total);
		return pageUtils;
	}

	/**
	* ${comments}详情页面
	* @param id
	* @return 详情页面路径
	*/
	@GetMapping("/view/{id}")
	@RequiresPermissions("${pathName}:${classname}:view")
	@ApiOperation(value="返回${comments}详情页面", notes="返回${comments}详情页面")
	String view(@PathVariable("id") ${pk.attrType} id,Model model){
			${className}DO ${classname} = ${classname}Service.get(id);
		model.addAttribute("${classname}", ${classname});
		return preUrl + "/view";
	}

	/**
	 * ${comments}详情接口
	 * @param id
	 * @return 详情页面路径
	 */
	@GetMapping("/info/{id}")
	@RequiresPermissions("${pathName}:${classname}:view")
	@ApiOperation(value="返回${comments}详情", notes="返回${comments}详情")
	${className}DO info(@PathVariable("id") ${pk.attrType} id){
			${className}DO ${classname} = ${classname}Service.get(id);
		return ${classname};
	}

	/**
	* ${comments}增加页面
	* @return 增加页面路径
	*/
	@GetMapping("/add")
	@RequiresPermissions("${pathName}:${classnametolower}:add")
	@ApiOperation(value="返回${comments}增加页面", notes="返回${comments}增加页面")
	String add(Model model){
#foreach($column in $columns)
#if($column.displayType == "003"||$column.displayType == "004"||$column.displayType == "005")
		model.addAttribute("${column.dictCode}",dictContentService.listDictByCode("${column.dictCode}"));
#end
#end
		return preUrl + "/add";
	}


	/**
	 * 保存${comments}
	 * @param ${classname}
     * @return R
	 */
	@Log("${comments}保存")
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("${pathName}:${classnametolower}:add")
	@ApiOperation(value="保存${comments}接口", notes="保存${comments}接口")
	public R save( ${className}DO ${classname}){
		if(${classname}Service.save(${classname})>0){
			return R.ok();
		}
		return R.error(1, "保存失败!");

	}

	/**
	* 编辑${comments}页面
    * @param ${pk.attrname}
    * @return 编辑页面路径
    */
	@GetMapping("/edit/{${pk.attrname}}")
	@RequiresPermissions("${pathName}:${classname}:edit")
	@ApiOperation(value="返回${comments}编辑页面", notes="返回${comments}编辑页面")
	String edit(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname},Model model){
		${className}DO ${classname} = ${classname}Service.get(${pk.attrname});
		model.addAttribute("${classname}", ${classname});
#foreach($column in $columns)
#if($column.displayType == "003"||$column.displayType == "004"||$column.displayType == "005")
		model.addAttribute("${column.dictCode}",dictContentService.listDictByCode("${column.dictCode}"));
#end
#end
	    return preUrl + "/edit";
	}
	

	/**
	 * 更新${comments}
	 * @param ${classname}
	 * @return R
	 */
	@Log("${comments}更新")
	@ResponseBody
	@PostMapping("/update")
	@RequiresPermissions("${pathName}:${classnametolower}:edit")
	@ApiOperation(value="更新${comments}接口", notes="更新${comments}接口")
	public R update( ${className}DO ${classname}){
		if(${classname}Service.update(${classname})>0){
			return R.ok();
		}
		return R.error(1, "更新失败!");
	}
	
	/**
	 * 删除${comments}
	 * @param ${pk.attrname}
	 * @return R
	 */
	@Log("${comments}删除")
	@PostMapping( "/del")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classnametolower}:del")
	@ApiOperation(value="删除${comments}接口", notes="删除${comments}接口")
	public R remove( ${pk.attrType} ${pk.attrname}){
		if(${classname}Service.del(${pk.attrname})>0){
		return R.ok();
		}
		return R.error(1, "删除失败!");
	}
	
	/**
	 * 批量删除${comments}
	 * @param ${pk.attrname}s
	 * @return R
	 */
	@Log("${comments}批量删除")
	@PostMapping( "/batchDel")
	@ResponseBody
	@RequiresPermissions("${pathName}:${classnametolower}:batchDel")
	@ApiOperation(value="批量删除${comments}接口", notes="批量删除${comments}接口")
	public R remove(@RequestParam("ids[]") ${pk.attrType}[] ${pk.attrname}s){
		if(${classname}Service.batchDel(${pk.attrname}s)>0){
			return R.ok();
		}
		return R.error(1, "批量删除失败!");
	}
}
